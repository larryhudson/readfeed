---
import { getFeedByIdForUser } from "@src/feeds";
import { createContentItem } from "@src/content-items";
import { uploadFile } from "@src/uploads";

await new Promise((resolve) => setTimeout(resolve, 1000));

const formData = await Astro.request.formData();
const file = formData.get("file") as File;
const title = formData.get("title");
const feedIdStr = formData.get("feed-id");
const feedId = parseInt(feedIdStr, 10);

const session = await Astro.locals.auth.validate();
const userId = session.user.userId;

// check feed belongs to user
const feed = await getFeedByIdForUser(userId, feedId);

if (!feed) {
  return new Response("Couldn't find a feed with that ID", {
    status: 404,
  });
}

// check the file is an allowed file type - pdf, docx, epub
const allowedFileTypes = [
  "application/pdf",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  "application/epub+zip",
];
const isAllowedFileType = allowedFileTypes.includes(file.type);
if (!isAllowedFileType) {
  return new Response(
    `File type ${file.type} not allowed. Must be one of ${allowedFileTypes.join(
      ", ",
    )}`,
    {
      status: 400,
    },
  );
}

// check the file is lower than the size limit
const maxFileSizeMB = 10;
const maxFileSizeBytes = 1024 * 1024 * maxFileSizeMB;
const isAllowedFileSize = maxFileSizeBytes > file.size;

if (!isAllowedFileSize) {
  return new Response(
    `File size ${file.size} bytes not allowed. Must be less than ${maxFileSizeMB}MB`,
    {
      status: 400,
    },
  );
}

// upload the file and create a document file record in the DB
const documentFile = await uploadFile(file);

// create the content item
const contentItem = await createContentItem({
  feedId,
  documentFileId: documentFile.id,
  type: "document",
  title,
});

return Astro.redirect(`/app/content-items/${contentItem.id}/`);
---
