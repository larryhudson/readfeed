---
import Layout from "@src/components/Layout.astro";
import Dump from "@src/components/Dump.astro";

// copied from Lucia example: https://github.com/lucia-auth/examples/blob/main/astro/email-and-password/src/pages/signup.astro
import { isValidEmail } from "@src/auth/email";

import { auth } from "@src/auth/lucia";
import { SqliteError } from "better-sqlite3";

import { getInvitationFromInviteCode } from "@src/waitlist";

const inviteCode = Astro.url.searchParams.get("invite-code");
const invitation = await getInvitationFromInviteCode(inviteCode);

if (!invitation) {
  return Astro.redirect("/auth/join-waitlist/");
}

let nameInput = "";
let emailInput = "";
let errorMessage = "";

// check for form submissions
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const name = formData.get("name");
  if (typeof name === "string") {
    nameInput = name;
  }

  const email = formData.get("email");
  const { ADMIN_EMAIL } = import.meta.env;
  const isAdminEmail = email === ADMIN_EMAIL;

  const password = formData.get("password");
  if (typeof email === "string") {
    emailInput = email;
  }
  // basic check
  const validPassword =
    typeof password === "string" &&
    password.length >= 6 &&
    password.length <= 255;
  if (isValidEmail(email) && validPassword) {
    try {
      const user = await auth.createUser({
        key: {
          providerId: "email", // auth method
          providerUserId: email.toLowerCase(), // unique id when using "email" auth method
          password, // hashed by Lucia
        },
        attributes: {
          name,
          email,
          is_admin: isAdminEmail ? 1 : 0,
        },
      });
      const session = await auth.createSession({
        userId: user.userId,
        attributes: {},
      });
      Astro.locals.auth.setSession(session); // set session cookie
      if (isAdminEmail) {
        return Astro.redirect("/admin/");
      } else {
        return Astro.redirect("/auth/waiting-room/", 302);
      }
    } catch (e) {
      // this part depends on the database you're using
      // check for unique constraint error in user table
      if (e instanceof SqliteError && e.code === "SQLITE_CONSTRAINT_UNIQUE") {
        errorMessage = "Account already exists";
        Astro.response.status = 400;
      } else {
        console.log(e);
        errorMessage = "An unknown error occurred";
        Astro.response.status = 500;
      }
    }
  } else {
    errorMessage = "Invalid input";
    Astro.response.status = 400;
  }
}

const session = await Astro.locals.auth.validate();
if (session) {
  if (!session.user.isApproved) {
    return Astro.redirect("/auth/waiting-room/");
  }
  return Astro.redirect("/app/");
}
---

<Layout>
  <h1>Register</h1>

  <form method="post">
    <label for="name">Name</label>
    <input name="name" id="name" value={nameInput} /><br />
    <label for="email">Email</label>
    <input name="email" id="email" value={emailInput} /><br />
    <label for="password">Password</label>
    <input type="password" name="password" id="password" /><br />
    <input type="submit" />
  </form>
  <p class="error">{errorMessage}</p>
  <a href="/auth/login/">Sign in</a>
  <Dump data={invitation} />
</Layout>
